From: Helmut Grohne <helmut@subdivi.de>
Date: Wed, 29 Mar 2023 09:56:03 +0200
Subject: systemd

bugs.debian.org/786929 is about minidlna being unable to bind to
network interfaces and has been unfixed for a long time.

Instead of messing with internals of minissdp, I propose outsourcing the
problem to systemd. It provides this feature called "socket activation".
Rather than having minidlna create and bind sockets, have systemd do
this. This is easily done using libsystemd and once we defer this task
to systemd, we can use all the means of customization that systemd
provides (including binding an interface). Doing so also allows binding
a privileged port if desired. I've implemented it in a way that the
feature remains optional.

This doesn't fix #786929, but it provides a really easy workaround for
any system running systemd without having to set up a firewall.

See: https://bugs.debian.org/1033648
---
 Makefile.am  |  1 +
 configure.ac |  2 ++
 minidlna.c   | 14 +++++++++++++-
 minissdp.c   | 14 +++++++++++++-
 4 files changed, 29 insertions(+), 2 deletions(-)

diff --git a/Makefile.am b/Makefile.am
index dcfc625..914ace0 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -62,6 +62,7 @@ minidlnad_LDADD = \
 	@LIBEXIF_LIBS@ \
 	@LIBINTL@ \
 	@LIBICONV@ \
+	@LIBSYSTEMD_LIBS@ \
 	-lFLAC $(flacogglibs) $(vorbislibs) $(avahilibs)
 
 testupnpdescgen_SOURCES = testupnpdescgen.c upnpdescgen.c
diff --git a/configure.ac b/configure.ac
index 11421a5..a6247da 100644
--- a/configure.ac
+++ b/configure.ac
@@ -525,6 +525,8 @@ AC_CHECK_FUNCS(inotify_init,
 
 AC_CHECK_FUNCS(kqueue, AM_CONDITIONAL(HAVE_KQUEUE, true), AM_CONDITIONAL(HAVE_KQUEUE, false))
 
+PKG_CHECK_MODULES([LIBSYSTEMD],[libsystemd],[AC_DEFINE(HAVE_LIBSYSTEMD,1,[Whether libsystemd is available])],[ ])
+
 ################################################################################################################
 ### Build Options
 
diff --git a/minidlna.c b/minidlna.c
index 6d2d06b..247d8a7 100644
--- a/minidlna.c
+++ b/minidlna.c
@@ -76,6 +76,10 @@
 #include <libintl.h>
 #endif
 
+#ifdef HAVE_LIBSYSTEMD
+#include <systemd/sd-daemon.h>
+#endif
+
 #include "event.h"
 #include "upnpglobalvars.h"
 #include "sql.h"
@@ -111,9 +115,16 @@ static int
 OpenAndConfHTTPSocket(unsigned short port)
 {
 	int s;
-	int i = 1;
+	int i;
 	struct sockaddr_in listenname;
 
+#ifdef HAVE_LIBSYSTEMD
+	s = sd_listen_fds(0);
+	for (i = 0; i < s; ++i)
+		if (sd_is_socket_inet(SD_LISTEN_FDS_START + i, 0, SOCK_STREAM, 1, 0) > 0)
+			return SD_LISTEN_FDS_START + i;
+#endif
+
 	/* Initialize client type cache */
 	memset(&clients, 0, sizeof(struct client_cache_s));
 
@@ -124,6 +135,7 @@ OpenAndConfHTTPSocket(unsigned short port)
 		return -1;
 	}
 
+	i = 1;
 	if (setsockopt(s, SOL_SOCKET, SO_REUSEADDR, &i, sizeof(i)) < 0)
 		DPRINTF(E_WARN, L_GENERAL, "setsockopt(http, SO_REUSEADDR): %s\n", strerror(errno));
 
diff --git a/minissdp.c b/minissdp.c
index fab0e92..f74d84f 100644
--- a/minissdp.c
+++ b/minissdp.c
@@ -42,6 +42,10 @@
 #include <arpa/inet.h>
 #include <errno.h>
 
+#ifdef HAVE_LIBSYSTEMD
+#include <systemd/sd-daemon.h>
+#endif
+
 #include "event.h"
 #include "minidlnapath.h"
 #include "upnphttp.h"
@@ -95,9 +99,16 @@ int
 OpenAndConfSSDPReceiveSocket(void)
 {
 	int s;
-	int i = 1;
+	int i;
 	struct sockaddr_in sockname;
 	
+#ifdef HAVE_LIBSYSTEMD
+	s = sd_listen_fds(0);
+	for (i = 0; i < s; ++i)
+		if (sd_is_socket_inet(SD_LISTEN_FDS_START + i, 0, SOCK_DGRAM, -1, 0) > 0)
+			return SD_LISTEN_FDS_START + i;
+#endif
+
 	s = socket(PF_INET, SOCK_DGRAM, 0);
 	if (s < 0)
 	{
@@ -105,6 +116,7 @@ OpenAndConfSSDPReceiveSocket(void)
 		return -1;
 	}	
 
+	i = 1;
 	if (setsockopt(s, SOL_SOCKET, SO_REUSEADDR, &i, sizeof(i)) < 0)
 		DPRINTF(E_WARN, L_SSDP, "setsockopt(udp, SO_REUSEADDR): %s\n", strerror(errno));
 #ifdef __linux__
